import Foundation

#if DEBUG
private class BundleFinder {}

public extension Bundle {
    
    // See: https://forums.swift.org/t/swiftui-previewer-crashes-while-in-swift-package-that-depends-on-anothers-packages-bundle-module-reference/41736
    // See: https://developer.apple.com/forums/thread/664295
    //
    // This is a "patched" version of the autogenerated Bundle.module
    //
    // For example, given this structure:
    //
    // Package A
    //   |- Resources
    //   |- ViewA (loads a "resource" from the package by calling A.module)
    //
    // Package B
    //   |-> ViewB (includes ViewA)
    //
    // If I am in package A, previewing View A -> all OK
    // If I am in package B, previewing View B, it crashes because ViewA internally references A.module
//    //
//    static func findModuleBundle(named bundleName: String) -> Bundle {
//        
//        let candidates = [
//            // Bundle should be present here when the package is linked into an App.
//            Bundle.main.resourceURL,
//
//            // Bundle should be present here when the package is linked into a framework.
//            Bundle(for: BundleFinder.self).resourceURL,
//
//            // For command-line tools.
//            Bundle.main.bundleURL,
//            
//            // THIS IS NEEDED TO PREVENT PREVIEWS FROM CRASHING
//            Bundle(for: BundleFinder.self).resourceURL?.deletingLastPathComponent().deletingLastPathComponent(),
//        ]
//
//        for candidate in candidates {
//            let bundlePath = candidate?.appendingPathComponent(bundleName + ".bundle")
//            if let bundle = bundlePath.flatMap(Bundle.init(url:)) {
//                return bundle
//            }
//        }
//        
//        fatalError("unable to find bundle named \(bundleName)")
//    }
}
#endif

